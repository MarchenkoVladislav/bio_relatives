package genome.compare;

import exception.GenomeException;
import genome.assembly.GenomeConstructor;
import genome.assembly.GenomeRegion;

import java.util.List;

/**
 * Defines basic person representation for the further
 * relationship analysis.
 *
 * @author Sergey Hvatov
 * @author Vladislav Marchenko
 */
public class Person {

    /**
     * Genome of the person generated by {@link genome.assembly.GenomeConstructor}.
     */
    private List<GenomeRegion> genome_;

    /**
     * Default class constructor from person's role and his/her genome.
     *
     * @param genome Genome of the person.
     * @throws GenomeException if list of genome regions is empty.
     */
    public Person(List<GenomeRegion> genome) throws GenomeException {
        if (genome.isEmpty())
        {
            throw new GenomeException(this.getClass().getName(), "Person", "genome", "is empty");
        }
        this.genome_ = genome;
    }

    /**
     * Class constructor from the names of the bam and bed files for this person's genome.
     *
     * @param bamFileName Name of the BAM file.
     * @param bedFileName Name of the BED file.
     * @throws GenomeException if exception occurs while working with the BED and BAM files.
     */
    public Person(String bamFileName, String bedFileName) throws GenomeException {
        //this.genome_ = new GenomeConstructor(bamFileName, bedFileName).assembly();
    }

    /**
     * Compares one Person's genome with another's.
     *
     * @param other Another person, with who we compare.
     * @return new object of {@link GeneComparisonResultAnalyzer}, which
     * holds the information about the results of the comparison of these two genomes.
     */
    public GeneComparisonResultAnalyzer compareGenomes(Person other) throws GenomeException {
        GenomeComparator comparator = new GenomeComparator(
            this.genome_,
            other.genome_
        );

        return new GeneComparisonResultAnalyzer(comparator.LevenshteinDistance());
    }

    /**
     * Get the genome of the person method.
     *
     * @return The genome of the person.
     */
    public List<GenomeRegion> getGenome() {
        return genome_;
    }

}
